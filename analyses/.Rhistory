rm(list = ls())
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("lme4")
require("reshape2")
require("ggplot2")
require("ade4")
require("knitr")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load data file
wq <- read.csv("../data/Matt_Ag_storm.csv")
dim(wq)
p <- ggplot(wq, aes(x=Storm_1, y=TDN_1), color="black")
p
p <- ggplot(wq, aes(x=Storm_1, y=TDN_1), color="black") +
geom_line(wq, aes(x=Storm_1, y="TDN_1"))
p <- ggplot(wq, aes(x=Storm_1, y=TDN_1)) +
geom_line(wq, aes(x=Storm_1, y="TDN_1"))
p <- ggplot(wq, aes(x=Storm_1, y=TDN_1)) + geom_line(aes(x=Storm_1, y="TDN_1"))
p
p <- ggplot(wq, aes(x=Storm_1, y=TDN_1)) + geom_line()
p
p <- ggplot(wq, aes(x="Storm_1", y="TDN_1")) + geom_line()
p
wq.1 <- wq[c(1,3,5:7,9)]
ggplot(pd.melt(wq.1, id_vars=['Storm_1']), aes(x='Storm_1', y='variable', color='variable')) +\
geom_line()
ggplot(wq, aes(x='Storm_1', y='TDN')) +\
geom_line()
ggplot(wq, aes(x='Storm_1', y='TDN')) + geom_line()
ggplot(wq, aes(x=Storm_1, y=TDN)) + geom_line()
# load data file
# load data file
wq <- read.csv("../data/Matt_Ag_storm.csv")
ggplot(wq, aes(x=Storm_1, y=DON)) + geom_line()
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
requre("scales")
require("scales")
# load data file
wq <- read.csv("../data/Matt_Ag_storm.csv")
wq.date <- as.Date(wq$Storm_1)
str(wq.date)
# load data file
wq <- read.csv("../data/Matt_Ag_storm.csv")
dim(wq)
install.packages("lubridate")
require("lubridate")
date.time <- strptime(wq$Storm_1, format = "%m/%d/%y  %H:%M")
ag.storm$Storm_1[1:5]
wq$Storm_1[1:5]
date.time[1:5]
str(date.time)
wq$date.time
as.storm
wq$date.time <- strptime(wq$Storm_1, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
str(wq)
date.time <- strptime(wq$Storm_1, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
p <- ggplot(wq, aes(x = date.time))
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("lme4")
require("reshape2")
require("ggplot2")
require("ade4")
require("knitr")
require("scales")
require("lubridate")
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = TDN_1, colour = "TDN"))
p
p <- p + geom_line(aes(y = WL, colour = "water level"))
p
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*5, name = "Water Level (m)"))
p
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(sec.axis = sec_axis(name = "Water Level (m)"))
p <- p + geom_line(aes(y = TDN_1, colour = "TDN"))
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = TDN_1, colour = "TDN"))
p <- p + geom_line(aes(y = WL/5, colour = "water level"))
# now adding the secondary axis, following the example in the help file scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*5, name = "Water Level (m)"))
p
p <- p + geom_line(aes(y = WL/100, colour = "water level"))
# now adding the secondary axis, following the example in the help file scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*100, name = "Water Level (m)"))
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = TDN_1, colour = "TDN"))
p <- p + geom_line(aes(y = WL/100, colour = "water level"))
# now adding the secondary axis, following the example in the help file scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*100, name = "Water Level (m)"))
p
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = TDN_1, colour = "TDN"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
# now adding the secondary axis, following the example in the help file scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.01, name = "Water Level (m)"))
p
p <- p + geom_line(aes(y = DON, colour = "DON"))
p
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = TDN_1, colour = "TDN"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
p <- p + geom_line(aes(y = DON, colour = "DON"))
p
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"), name = "N Parameter (mg/L)")
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
p
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("red", "blue", "black", "green"))
p
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "Air temperature [Â°C]",
x = "Date and time",
colour = "Parameter")
p
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = "top")
p
p <- + theme_bw()
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "darkgreen", "red", "blue"))
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, angle=30, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, angle=15, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, angle=45, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, angle=45, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.1, angle=45, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.5, hjust=0.5, angle=45, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.75, hjust=0.5, angle=45, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.75, hjust=0.5, angle=40, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.75, hjust=0.5, angle=30, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.85, hjust=0.5, angle=30, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.95, hjust=0.5, angle=30, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=30, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
# load data file
wq <- read.csv("../data/Matt_Ag_storm.csv")
dim(wq)
date.time <- strptime(wq$Storm_1, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "darkgreen", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = "top")
p <- p + theme_bw()
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
ggsave("../figures/AgStormExample.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
date.time <- strptime(wq$Storm_1, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "darkgreen", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=10), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
ggsave("../figures/AgStormExample.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
date.time <- strptime(wq$Storm_1, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
ggsave("../figures/AgStormExample.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
if(Sys.info()[1] == "Darwin"){
setwd("~/GitHub/Mattamuskeet_Hydrology/analyses/")
} else {
setwd(choose.dir())
}
rm(list = ls())
#load req'd packages
require("dplyr")
require("reshape2")
require("ggplot2")
require("knitr")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load data file
wq <- read.csv("../data/Matt_Ag_storm.csv")
dim(wq)
wq <- read.csv("../data/Matt_Ag_storm.csv")
date.time <- strptime(wq$Storm_1, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
ggsave("../figures/AgStormExample.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
date.time.hobo <- strptime(wq$Storm_1_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq <- read.csv("../data/Matt_Ag_storm.csv")
date.time <- strptime(wq$Storm_1_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
date.time.nut <- strptime(wq$Nut_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time.nut <- date.time.nut
str(wq)
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
p <- p + geom_line(aes(x = date.time.nut, y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
# load data file
wq <- read.csv("../data/Matt_Ag_storm.csv")
dim(wq)
wq <- read.csv("../data/Matt_Ag_storm.csv")
date.time <- strptime(wq$Storm_1_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
date.time.nut <- strptime(wq$Nut_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time.nut <- date.time.nut
str(wq)
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
p <- p + geom_line(aes(x = date.time.nut, y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
wq <- read.csv("../data/Matt_Ag_storm.csv")
date.time <- strptime(wq$Storm_1_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
date.time.nut <- strptime(wq$NUT_DATE.TIME, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time.nut <- date.time.nut
str(wq)
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
p <- p + geom_line(aes(x = date.time.nut, y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
#ggsave("../figures/AgStormExample.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
wq <- read.csv("../data/Matt_Ag_storm.csv")
date.time <- strptime(wq$Storm_1_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
date.time.nut <- strptime(wq$NUT_DATE.TIME, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time.nut <- date.time.nut
str(wq)
p <- ggplot(wq, aes(x = date.time))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
p <- p + geom_line(aes(x = date.time.nut, y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
p <- p + theme_bw() + theme(legend.position = "top")
p
date.time.nut <- strptime(wq$NUT_DATE.TIME, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time.nut <- date.time.nut
str(wq)
p <- ggplot(wq, aes(x = date.time.nut))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
p <- p + geom_line(aes(x = date.time, y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
wq <- read.csv("../data/Matt_Ag_storm.csv")
date.time <- strptime(wq$Storm_1_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
rm(list = ls())
#load req'd packages
require("dplyr")
wq <- read.csv("../data/Matt_Ag_storm.csv")
date.time <- strptime(wq$Storm_1_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
if(Sys.info()[1] == "Darwin"){
setwd("~/GitHub/Mattamuskeet_Hydrology/analyses/")
} else {
setwd(choose.dir())
}
rm(list = ls())
#load req'd packages
require("dplyr")
require("reshape2")
require("ggplot2")
require("knitr")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
wq <- read.csv("../data/Matt_Ag_storm.csv")
date.time <- strptime(wq$Storm_1_date, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
date.time <- strptime(wq$Storm_1, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time <- date.time
str(wq)
date.time.nut <- strptime(wq$NUT_DATE.TIME, format = "%m/%d/%y  %H:%M", tz = "America/New_York")
wq$date.time.nut <- date.time.nut
str(wq)
p <- ggplot(wq, aes(x = date.time.nut))
p <- p + geom_line(aes(y = DON, colour = "organic N"))
p <- p + geom_line(aes(y = NH4_1, colour = "ammonium-N"))
p <- p + geom_line(aes(y = NO3_1, colour = "nitrate-N"))
p <- p + geom_line(aes(x = date.time, y = WL*10, colour = "water level"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*0.1, name = "Water Level (m)"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("black", "green", "red", "blue"))
p <- p + labs(y = "N Parameter (mg/L)",
x = "Date and time",
colour = "Parameter")
p <- p + theme_bw() + theme(legend.position = "top")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.90, hjust=0.5, angle=25, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p
ggsave("../figures/AgStormExample.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
rm(list=ls())
setwd("~/GitHub/ECU-BGC-ME_2017")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
require("reshape")
require("ggplot2")
data1 <- read.csv("../data/2017_BGE_ME_expt_DATA.csv", header=TRUE)
str(data1)
#NOTE: all parametric tests were run without testing for assumptions to simplify
#code for the class - so the 'proper' way to run these stats is to test for
#normality and homogeneity of variances or modeling fitting approaches
p <- ggplot(data1, aes(x = Biochar, y = Cmin, group = interaction(Plant, Microbe), fill = Microbe))
p <- ggplot(data1, aes(x = Biochar, y = Cmin, group = interaction(Plant, Microbe), fill = Microbe)) + geom_boxplot()
p
p <- ggplot(data1, aes(x = Biochar, y = Cmin, group = interaction(Plant, Microbe), fill = group)) + geom_boxplot()
p
p <- ggplot(data1, aes(x = as.factor(data1$Biochar), y = Cmin, fill = Microbe))
p <- ggplot(data1, aes(x = as.factor(data1$Biochar), y = Cmin, fill = Microbe)) + geom_boxplot()
p
p <- ggplot(data1, aes(x = as.factor(data1$Biochar), y = Cmin, fill = Microbe))
p <- p + geom_boxplot()
p
rm(list=ls())
setwd("~/GitHub/ECU-BGC-ME_2017")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
require("reshape")
require("ggplot2")
data1 <- read.csv("../data/2017_BGE_ME_expt_DATA.csv", header=TRUE)
str(data1)
#NOTE: all parametric tests were run without testing for assumptions to simplify
#code for the class - so the 'proper' way to run these stats is to test for
#normality and homogeneity of variances or modeling fitting approaches
#graphing C mineralization boxplots
library(dplyr)
p <- ggplot(data1, aes(x = Biochar, y = Cmin, fill = Microbe))
p <- p + geom_boxplot()
p
p <- ggplot(data1, aes(Biochar, Cmin))
p <- p + geom_boxplot()
p
p <- ggplot(data1, aes(Plant, Cmin))
p <- p + geom_boxplot()
p
